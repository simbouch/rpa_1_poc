#!/usr/bin/env python3
"""
Gestionnaire d'entra√Ænement pour cr√©er de nouveaux mod√®les.
"""

import os
import json
import spacy
import subprocess
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Tuple
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TrainingManager:
    """Gestionnaire pour l'entra√Ænement de nouveaux mod√®les."""
    
    def __init__(self):
        self.training_dir = Path("training")
        self.models_dir = Path("models")
        self.models_dir.mkdir(exist_ok=True)
        
        self.model_types = {
            "general": {
                "name": "Mod√®le g√©n√©ral",
                "description": "Pour documents g√©n√©raux et administratifs",
                "data_generator": "generate_synthetic_data.py"
            },
            "medical": {
                "name": "Mod√®le m√©dical",
                "description": "Pour rapports et documents m√©dicaux",
                "data_generator": "generate_medical_data.py"
            },
            "legal": {
                "name": "Mod√®le juridique", 
                "description": "Pour documents juridiques et l√©gaux",
                "data_generator": "generate_legal_data.py"
            }
        }
    
    def list_available_training_types(self) -> Dict:
        """Liste les types d'entra√Ænement disponibles."""
        return self.model_types
    
    def generate_training_data(self, model_type: str, num_examples: int = 500) -> bool:
        """G√©n√®re des donn√©es d'entra√Ænement pour un type de mod√®le."""
        if model_type not in self.model_types:
            logger.error(f"‚ùå Type de mod√®le non support√©: {model_type}")
            return False
        
        generator_script = self.model_types[model_type]["data_generator"]
        script_path = self.training_dir / "scripts" / generator_script
        
        if not script_path.exists():
            logger.error(f"‚ùå Script g√©n√©rateur non trouv√©: {script_path}")
            return False
        
        try:
            logger.info(f"üîÑ G√©n√©ration de donn√©es pour {model_type}...")
            result = subprocess.run([
                sys.executable, str(script_path)
            ], capture_output=True, text=True, cwd=str(self.training_dir.parent))
            
            if result.returncode == 0:
                logger.info(f"‚úÖ Donn√©es g√©n√©r√©es pour {model_type}")
                return True
            else:
                logger.error(f"‚ùå Erreur g√©n√©ration: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
            return False
    
    def convert_training_data(self, model_type: str) -> bool:
        """Convertit les donn√©es JSON en format spaCy."""
        try:
            logger.info(f"üîÑ Conversion des donn√©es pour {model_type}...")
            
            # Utiliser le script de conversion existant
            convert_script = self.training_dir / "scripts" / "convert_data.py"
            if not convert_script.exists():
                logger.error("‚ùå Script de conversion non trouv√©")
                return False
            
            result = subprocess.run([
                sys.executable, str(convert_script)
            ], capture_output=True, text=True, cwd=str(self.training_dir.parent))
            
            if result.returncode == 0:
                logger.info(f"‚úÖ Donn√©es converties pour {model_type}")
                return True
            else:
                logger.error(f"‚ùå Erreur conversion: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la conversion: {e}")
            return False
    
    def train_model(self, model_type: str, epochs: int = 50) -> bool:
        """Entra√Æne un nouveau mod√®le."""
        try:
            logger.info(f"üöÄ Entra√Ænement du mod√®le {model_type}...")
            
            # Utiliser le script d'entra√Ænement simple
            train_script = self.training_dir / "simple_train.py"
            if not train_script.exists():
                logger.error("‚ùå Script d'entra√Ænement non trouv√©")
                return False
            
            result = subprocess.run([
                sys.executable, str(train_script)
            ], capture_output=True, text=True, cwd=str(self.training_dir.parent))
            
            if result.returncode == 0:
                logger.info(f"‚úÖ Mod√®le {model_type} entra√Æn√© avec succ√®s")
                
                # D√©placer le mod√®le vers le bon dossier
                source_path = self.training_dir / "model_output" / "model-best"
                target_path = self.models_dir / f"{model_type}_model"
                
                if source_path.exists():
                    if target_path.exists():
                        import shutil
                        shutil.rmtree(target_path)
                    
                    import shutil
                    shutil.move(str(source_path), str(target_path))
                    
                    # Cr√©er les m√©tadonn√©es du mod√®le
                    self.create_model_metadata(model_type, target_path)
                    
                    logger.info(f"‚úÖ Mod√®le d√©plac√© vers: {target_path}")
                    return True
                else:
                    logger.error("‚ùå Mod√®le entra√Æn√© non trouv√©")
                    return False
            else:
                logger.error(f"‚ùå Erreur entra√Ænement: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'entra√Ænement: {e}")
            return False
    
    def create_model_metadata(self, model_type: str, model_path: Path):
        """Cr√©e les m√©tadonn√©es du mod√®le."""
        metadata = {
            "model_type": model_type,
            "model_name": self.model_types[model_type]["name"],
            "description": self.model_types[model_type]["description"],
            "created_at": datetime.now().isoformat(),
            "version": "1.0.0",
            "labels": ["nom_personne", "reference_dossier", "type_analyse", "date_prelevement", "service_demandeur"],
            "training_info": {
                "framework": "spaCy",
                "base_model": "fr_core_news_md"
            }
        }
        
        metadata_path = model_path / "model_info.json"
        try:
            with open(metadata_path, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, indent=2, ensure_ascii=False)
            logger.info(f"‚úÖ M√©tadonn√©es cr√©√©es: {metadata_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur cr√©ation m√©tadonn√©es: {e}")
    
    def train_new_model(self, model_type: str, num_examples: int = 500, epochs: int = 50) -> bool:
        """Pipeline complet d'entra√Ænement d'un nouveau mod√®le."""
        logger.info(f"üöÄ D√©marrage entra√Ænement complet pour {model_type}")
        
        # 1. G√©n√©rer les donn√©es
        if not self.generate_training_data(model_type, num_examples):
            return False
        
        # 2. Convertir les donn√©es
        if not self.convert_training_data(model_type):
            return False
        
        # 3. Entra√Æner le mod√®le
        if not self.train_model(model_type, epochs):
            return False
        
        logger.info(f"üéâ Entra√Ænement complet termin√© pour {model_type}")
        return True
    
    def list_trained_models(self) -> List[Dict]:
        """Liste les mod√®les entra√Æn√©s disponibles."""
        models = []
        
        for model_dir in self.models_dir.iterdir():
            if model_dir.is_dir():
                metadata_path = model_dir / "model_info.json"
                if metadata_path.exists():
                    try:
                        with open(metadata_path, 'r', encoding='utf-8') as f:
                            metadata = json.load(f)
                        
                        models.append({
                            "id": model_dir.name,
                            "name": metadata.get("model_name", model_dir.name),
                            "description": metadata.get("description", ""),
                            "created_at": metadata.get("created_at", ""),
                            "version": metadata.get("version", "1.0.0")
                        })
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Erreur lecture m√©tadonn√©es {model_dir}: {e}")
        
        return models
    
    def delete_model(self, model_id: str) -> bool:
        """Supprime un mod√®le entra√Æn√©."""
        model_path = self.models_dir / model_id
        
        if not model_path.exists():
            logger.error(f"‚ùå Mod√®le non trouv√©: {model_id}")
            return False
        
        try:
            import shutil
            shutil.rmtree(model_path)
            logger.info(f"‚úÖ Mod√®le supprim√©: {model_id}")
            return True
        except Exception as e:
            logger.error(f"‚ùå Erreur suppression: {e}")
            return False

# Instance globale
training_manager = TrainingManager()
