import streamlit as st
import tempfile
import os
import json
from datetime import datetime
from extraction_enhanced import PDFExtractor, get_available_models

# Configuration de la page
st.set_page_config(
    page_title="üß† IA : Extraction PDF",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Titre principal
st.title("üß† Prototype IA : Extraction de donn√©es de documents PDF")
st.markdown("### üöÄ Extraction automatique d'informations depuis des rapports PDF")
st.markdown("---")

# Sidebar pour la configuration
st.sidebar.header("‚öôÔ∏è Configuration")

# S√©lection du mod√®le
available_models = get_available_models()
if available_models:
    model_options = {}
    for model in available_models:
        if "model-best" in model:
            model_options["üéØ Mod√®le entra√Æn√© (recommand√©)"] = model
        else:
            model_options["üìö Mod√®le par d√©faut (fr_core_news_md)"] = model

    if len(model_options) > 0:
        selected_model_name = st.sidebar.selectbox(
            "Choisir le mod√®le d'extraction:",
            options=list(model_options.keys()),
            index=0 if "üéØ Mod√®le entra√Æn√© (recommand√©)" in model_options else 0
        )
        selected_model_path = model_options[selected_model_name]
    else:
        st.sidebar.error("‚ùå Aucun mod√®le disponible")
        st.stop()
else:
    st.sidebar.error("‚ùå Aucun mod√®le disponible")
    st.stop()

# Options d'affichage
show_metadata = st.sidebar.checkbox("Afficher les m√©tadonn√©es", value=True)
show_confidence = st.sidebar.checkbox("Afficher les scores de confiance", value=False)

# Informations sur le mod√®le s√©lectionn√©
st.sidebar.markdown("---")
st.sidebar.subheader("üìä Informations du mod√®le")
if "model-best" in selected_model_path:
    st.sidebar.success("‚úÖ Mod√®le personnalis√© actif")
    model_info_path = "training/model_output/model_info.json"
    if os.path.exists(model_info_path):
        try:
            with open(model_info_path, 'r', encoding='utf-8') as f:
                model_info = json.load(f)
            st.sidebar.info(f"Version: {model_info.get('version', 'N/A')}")
            st.sidebar.info(f"Cr√©√©: {model_info.get('created_at', 'N/A')}")
        except:
            pass
else:
    st.sidebar.info("üìö Mod√®le spaCy par d√©faut")

# Chargement du mod√®le
@st.cache_resource(show_spinner=False)
def load_extractor(model_path):
    """Charge l'extracteur avec le mod√®le sp√©cifi√©."""
    try:
        if "fr_core_news_md" in model_path:
            return PDFExtractor(None)  # Utilise le mod√®le par d√©faut
        else:
            return PDFExtractor(model_path)
    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement du mod√®le: {e}")
        return None

# Interface principale
col1, col2 = st.columns([2, 1])

with col1:
    st.header("üìÑ Upload de document")
    uploaded_file = st.file_uploader(
        "T√©l√©charger un rapport PDF √† analyser",
        type=["pdf"],
        help="Formats support√©s: PDF uniquement"
    )

with col2:
    st.header("üéØ Champs extraits")
    st.markdown("""
    - **Nom/Pr√©nom** de la personne
    - **R√©f√©rence** du dossier
    - **Type d'analyse** ou pr√©l√®vement
    - **Date** de pr√©l√®vement
    - **Service** demandeur
    """)

# Traitement du fichier
if uploaded_file:
    # Charger l'extracteur
    extracteur = load_extractor(selected_model_path)
    if not extracteur:
        st.stop()
    
    # Enregistrement temporaire du PDF
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
        tmp_file.write(uploaded_file.read())
        chemin_temp = tmp_file.name

    # Affichage des informations du fichier
    st.markdown("---")
    st.subheader("üìã Informations du fichier")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Nom du fichier", uploaded_file.name)
    with col2:
        st.metric("Taille", f"{uploaded_file.size / 1024:.1f} KB")
    with col3:
        st.metric("Type", uploaded_file.type)

    # Extraction
    st.markdown("---")
    st.subheader("üîç R√©sultats de l'extraction")
    
    with st.spinner("Analyse en cours..."):
        try:
            start_time = datetime.now()
            donnees = extracteur.extraire_infos(chemin_temp)
            end_time = datetime.now()
            processing_time = (end_time - start_time).total_seconds()
            
        except Exception as e:
            st.error(f"‚ùå Une erreur est survenue lors de l'extraction :\n{e}")
            st.stop()

    # Affichage des r√©sultats
    if donnees:
        st.success(f"‚úÖ Extraction r√©ussie en {processing_time:.2f} secondes")
        
        # M√©tadonn√©es
        metadata = donnees.pop("_metadata", {})
        
        # R√©sultats principaux
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üìä Donn√©es extraites")
            
            # Affichage structur√© des r√©sultats
            for field, value in donnees.items():
                if value:
                    st.success(f"**{field.replace('_', ' ').title()}**: {value}")
                else:
                    st.warning(f"**{field.replace('_', ' ').title()}**: Non trouv√©")
        
        with col2:
            st.markdown("### üìÅ Export des donn√©es")
            
            # Bouton de t√©l√©chargement JSON
            json_data = json.dumps(donnees, indent=2, ensure_ascii=False)
            st.download_button(
                label="üíæ T√©l√©charger en JSON",
                data=json_data,
                file_name=f"extraction_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
            
            # Bouton de t√©l√©chargement CSV
            csv_data = "\n".join([f"{k},{v}" for k, v in donnees.items()])
            st.download_button(
                label="üìä T√©l√©charger en CSV",
                data=csv_data,
                file_name=f"extraction_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        # M√©tadonn√©es (si activ√©es)
        if show_metadata and metadata:
            st.markdown("---")
            st.subheader("üîß M√©tadonn√©es techniques")
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("M√©thode", metadata.get("extraction_method", "N/A"))
            with col2:
                st.metric("Champs mod√®le", metadata.get("model_fields", 0))
            with col3:
                st.metric("Champs regex", metadata.get("regex_fields", 0))
            with col4:
                st.metric("Longueur texte", f"{metadata.get('text_length', 0)} chars")
        
        # Affichage JSON complet
        with st.expander("üîç Voir les donn√©es brutes (JSON)"):
            st.json(donnees)
    
    else:
        st.warning("‚ö†Ô∏è Aucune donn√©e extraite du document")

# Nettoyage
try:
    if 'chemin_temp' in locals():
        os.unlink(chemin_temp)
except:
    pass

# Footer avec informations
st.markdown("---")
st.markdown("""
### üìö √Ä propos
Cette application utilise l'intelligence artificielle pour extraire automatiquement des informations 
structur√©es depuis des documents PDF. Elle combine des mod√®les de traitement du langage naturel (NLP) 
avec des techniques de reconnaissance d'entit√©s nomm√©es (NER).

**Technologies utilis√©es:**
- spaCy pour le traitement du langage naturel
- pdfplumber pour l'extraction de texte PDF
- Streamlit pour l'interface utilisateur

**D√©velopp√© par:** √âquipe RPA - Prototype v1.0
""")
