#!/usr/bin/env python3
"""
Module d'extraction am√©lior√© avec support pour les mod√®les entra√Æn√©s.
Combine l'extraction par mod√®le NER et les m√©thodes de fallback par regex.
"""

import pdfplumber
import spacy
import re
import os
import logging
from typing import Dict, Optional, Tuple, List
from pathlib import Path

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PDFExtractor:
    """Extracteur de donn√©es PDF avec mod√®le NER et fallback regex."""
    
    def __init__(self, model_path: Optional[str] = None):
        """
        Initialise l'extracteur.
        
        Args:
            model_path: Chemin vers le mod√®le entra√Æn√©. Si None, utilise le mod√®le par d√©faut.
        """
        self.nlp = None
        self.use_trained_model = False
        
        # Essayer de charger le mod√®le entra√Æn√©
        if model_path and os.path.exists(model_path):
            try:
                self.nlp = spacy.load(model_path)
                self.use_trained_model = True
                logger.info(f"‚úÖ Mod√®le entra√Æn√© charg√©: {model_path}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Impossible de charger le mod√®le entra√Æn√©: {e}")
        
        # Fallback vers le mod√®le par d√©faut
        if not self.use_trained_model:
            try:
                self.nlp = spacy.load("fr_core_news_md")
                logger.info("‚úÖ Mod√®le par d√©faut fr_core_news_md charg√©")
            except OSError:
                logger.error("‚ùå Aucun mod√®le spaCy disponible")
                raise
    
    def lire_pdf(self, chemin_fichier: str) -> str:
        """Extrait le texte d'un fichier PDF."""
        try:
            with pdfplumber.open(chemin_fichier) as pdf:
                texte = "\n".join([
                    page.extract_text() or "" 
                    for page in pdf.pages
                ])
            logger.info(f"‚úÖ PDF lu: {len(texte)} caract√®res extraits")
            return texte
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la lecture du PDF: {e}")
            raise
    
    def extraire_avec_modele(self, texte: str) -> Dict[str, Optional[str]]:
        """Extrait les informations en utilisant le mod√®le NER."""
        if not self.use_trained_model:
            return {}
        
        try:
            doc = self.nlp(texte)
            
            # Mapping des labels vers les cl√©s de sortie
            label_mapping = {
                "nom_personne": "nom_prenom",
                "reference_dossier": "reference_dossier",
                "type_analyse": "type_prelevement",
                "date_prelevement": "date_prelevement",
                "service_demandeur": "service_demandeur"
            }

            resultats = {}

            for ent in doc.ents:
                if ent.label_ in label_mapping:
                    key = label_mapping[ent.label_]
                    # Garder l'entit√© (pas de score disponible dans notre mod√®le simple)
                    if key not in resultats:
                        resultats[key] = ent.text.strip()
            
            logger.info(f"‚úÖ Extraction par mod√®le: {len(resultats)} champs trouv√©s")
            return resultats
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de l'extraction par mod√®le: {e}")
            return {}
    
    def extraire_avec_regex(self, texte: str) -> Dict[str, Optional[str]]:
        """Extrait les informations en utilisant des expressions r√©guli√®res."""
        try:
            # Patterns regex am√©lior√©s
            patterns = {
                "reference_dossier": [
                    r"(?:R√©f√©rence|R√©f\.?|Reference|N¬∞\s*dossier)\s*:?\s*([\w\d\-\/]+)",
                    r"Dossier\s*:?\s*([\w\d\-\/]+)"
                ],
                "type_prelevement": [
                    r"(?:Objet|Type\s*d'analyse|Analyse|Examen)\s*:?\s*(.+?)(?:\n|$)",
                    r"(?:Pr√©l√®vement|√âchantillon)\s*:?\s*(.+?)(?:\n|$)"
                ],
                "date_prelevement": [
                    r"(?:Date\s*de\s*pr√©l√®vement|Date\s*pr√©l√®vement|Pr√©lev√©\s*le|Date)\s*:?\s*(\d{1,2}[\/\-]\d{1,2}[\/\-]\d{4})",
                    r"(\d{1,2}[\/\-]\d{1,2}[\/\-]\d{4})"
                ],
                "service_demandeur": [
                    r"(?:Demandeur|Service|Demand√©\s*par)\s*:?\s*([^:\n]+?)(?:\n|$)",
                    r"(?:Police|Gendarmerie|Laboratoire|H√¥pital|Clinique|Centre)",
                ],
                "nom_prenom": [
                    r"(?:Nom|Patient|Nom\s*du\s*patient)\s*:?\s*([A-Z][A-Z\s\-]+?)(?:\n|$)",
                    r"(?:M\.|Mme|Mr|Madame|Monsieur)\s+([A-Z][A-Z\s\-]+)"
                ]
            }
            
            resultats = {}
            
            for field, pattern_list in patterns.items():
                for pattern in pattern_list:
                    match = re.search(pattern, texte, re.IGNORECASE | re.MULTILINE)
                    if match:
                        value = match.group(1).strip()
                        if value and len(value) > 1:  # √âviter les matches trop courts
                            resultats[field] = value
                            break
            
            # Post-traitement sp√©cifique
            if "nom_prenom" in resultats:
                resultats["nom_prenom"] = resultats["nom_prenom"].upper()
            
            if "service_demandeur" in resultats:
                service = resultats["service_demandeur"]
                if any(word in service.lower() for word in ["police", "gendarmerie"]):
                    resultats["service_demandeur"] = service.capitalize()
            
            logger.info(f"‚úÖ Extraction par regex: {len(resultats)} champs trouv√©s")
            return resultats
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de l'extraction par regex: {e}")
            return {}
    
    def fusionner_resultats(self, resultats_modele: Dict, resultats_regex: Dict) -> Dict[str, Optional[str]]:
        """Fusionne les r√©sultats du mod√®le et du regex en privil√©giant le mod√®le."""
        resultats_finaux = {}
        
        # Tous les champs possibles
        champs = {"nom_prenom", "reference_dossier", "type_prelevement", "date_prelevement", "service_demandeur"}
        
        for champ in champs:
            # Privil√©gier le mod√®le, puis le regex, puis None
            if champ in resultats_modele and resultats_modele[champ]:
                resultats_finaux[champ] = resultats_modele[champ]
            elif champ in resultats_regex and resultats_regex[champ]:
                resultats_finaux[champ] = resultats_regex[champ]
            else:
                resultats_finaux[champ] = None
        
        return resultats_finaux
    
    def extraire_infos(self, chemin_fichier: str) -> Dict[str, Optional[str]]:
        """
        Extrait les informations d'un fichier PDF.
        
        Args:
            chemin_fichier: Chemin vers le fichier PDF
            
        Returns:
            Dictionnaire avec les informations extraites
        """
        # Lire le PDF
        texte = self.lire_pdf(chemin_fichier)
        
        # Extraction avec le mod√®le NER
        resultats_modele = self.extraire_avec_modele(texte)
        
        # Extraction avec regex (fallback)
        resultats_regex = self.extraire_avec_regex(texte)
        
        # Fusionner les r√©sultats
        resultats_finaux = self.fusionner_resultats(resultats_modele, resultats_regex)
        
        # Ajouter des m√©tadonn√©es
        resultats_finaux["_metadata"] = {
            "extraction_method": "model" if self.use_trained_model else "regex",
            "model_fields": len(resultats_modele),
            "regex_fields": len(resultats_regex),
            "text_length": len(texte)
        }
        
        logger.info(f"‚úÖ Extraction termin√©e: {sum(1 for v in resultats_finaux.values() if v and not isinstance(v, dict))} champs extraits")
        
        return resultats_finaux

# Fonction de compatibilit√© avec l'ancienne API
def extraire_infos(chemin_fichier: str) -> Dict[str, Optional[str]]:
    """
    Fonction de compatibilit√© avec l'ancienne API.
    Essaie d'utiliser le mod√®le entra√Æn√©, sinon utilise le regex.
    """
    # Chercher le mod√®le entra√Æn√©
    model_path = "training/model_output/model-best"
    if not os.path.exists(model_path):
        model_path = None
    
    extracteur = PDFExtractor(model_path)
    resultats = extracteur.extraire_infos(chemin_fichier)
    
    # Retirer les m√©tadonn√©es pour la compatibilit√©
    if "_metadata" in resultats:
        del resultats["_metadata"]
    
    return resultats

# Fonction pour obtenir les mod√®les disponibles
def get_available_models() -> List[str]:
    """Retourne la liste des mod√®les disponibles."""
    models = []
    
    # Mod√®le entra√Æn√©
    trained_model = "training/model_output/model-best"
    if os.path.exists(trained_model):
        models.append(trained_model)
    
    # Mod√®le par d√©faut
    try:
        spacy.load("fr_core_news_md")
        models.append("fr_core_news_md")
    except OSError:
        pass
    
    return models

if __name__ == "__main__":
    # Test simple
    print("üß™ Test de l'extracteur...")
    
    # Lister les mod√®les disponibles
    models = get_available_models()
    print(f"Mod√®les disponibles: {models}")
    
    # Test avec un fichier exemple si disponible
    test_files = ["exemple_rapport.pdf", "rapport_analyse_complet.pdf"]
    for test_file in test_files:
        if os.path.exists(test_file):
            print(f"\nüìÑ Test avec {test_file}:")
            try:
                resultats = extraire_infos(test_file)
                for key, value in resultats.items():
                    print(f"  {key}: {value}")
            except Exception as e:
                print(f"  ‚ùå Erreur: {e}")
            break
    else:
        print("Aucun fichier de test trouv√©")
