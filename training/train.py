#!/usr/bin/env python3
"""
Script d'entra√Ænement am√©lior√© pour le mod√®le spaCy NER.
Inclut la pr√©paration des donn√©es, l'entra√Ænement et l'√©valuation.
"""

import subprocess
import sys
import os
import logging
import json
from pathlib import Path
import spacy
import time

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('training/training.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def check_dependencies():
    """V√©rifie que toutes les d√©pendances sont install√©es."""
    try:
        import spacy
        spacy.load("fr_core_news_md")
        logger.info("‚úÖ spaCy et fr_core_news_md disponibles")
        return True
    except Exception as e:
        logger.error(f"‚ùå D√©pendances manquantes: {e}")
        return False

def prepare_training_data():
    """Pr√©pare les donn√©es d'entra√Ænement en convertissant le JSON en format spaCy."""
    logger.info("üîÑ Pr√©paration des donn√©es d'entra√Ænement...")

    # Importer et ex√©cuter le script de conversion
    try:
        from training.scripts.convert_data import main as convert_main
        convert_main()
        logger.info("‚úÖ Donn√©es d'entra√Ænement pr√©par√©es")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la pr√©paration des donn√©es: {e}")
        return False

def validate_config(config_path: str):
    """Valide le fichier de configuration."""
    if not os.path.exists(config_path):
        logger.error(f"‚ùå Fichier de configuration non trouv√©: {config_path}")
        return False

    # V√©rifier que les fichiers de donn√©es existent
    train_data_path = "training/data/spacy_format/train_data.spacy"
    if not os.path.exists(train_data_path):
        logger.error(f"‚ùå Fichier de donn√©es d'entra√Ænement non trouv√©: {train_data_path}")
        return False

    logger.info("‚úÖ Configuration valid√©e")
    return True

def train_spacy_model(config_path: str):
    """
    Lance l'entra√Ænement spaCy NER √† partir du fichier de config sp√©cifi√©.
    """
    output_dir = "training/model_output"

    # Cr√©er le dossier de sortie
    Path(output_dir).mkdir(parents=True, exist_ok=True)

    command = [
        sys.executable, "-m", "spacy", "train", config_path,
        "--output", output_dir,
        "--verbose"
    ]

    logger.info("üõ†Ô∏è D√©marrage de l'entra√Ænement spaCy NER...")
    logger.info(f"Commande: {' '.join(command)}")

    start_time = time.time()

    try:
        result = subprocess.run(command, check=True, capture_output=True, text=True)
        logger.info("‚úÖ Entra√Ænement termin√© avec succ√®s")
        logger.info(f"Sortie: {result.stdout}")

        end_time = time.time()
        duration = end_time - start_time
        logger.info(f"‚è±Ô∏è Dur√©e d'entra√Ænement: {duration:.2f} secondes")

        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erreur lors de l'entra√Ænement: {e}")
        logger.error(f"Sortie d'erreur: {e.stderr}")
        return False

def evaluate_model():
    """√âvalue le mod√®le entra√Æn√©."""
    model_path = "training/model_output/model-best"

    if not os.path.exists(model_path):
        logger.error(f"‚ùå Mod√®le non trouv√©: {model_path}")
        return False

    try:
        logger.info("üîç √âvaluation du mod√®le...")

        # Charger le mod√®le
        nlp = spacy.load(model_path)

        # Test simple avec des exemples
        test_texts = [
            "Nom : MARTIN JEAN\nR√©f√©rence : 2025-TEST/01-A\nObjet : Test d'analyse\nDate : 15/06/2025\nDemandeur : Service test",
            "Patient : DURAND MARIE\nDossier : 2025-LAB/02-B\nAnalyse : Examen sanguin\nPr√©l√®vement : 20/06/2025\nService : Laboratoire"
        ]

        for i, text in enumerate(test_texts):
            doc = nlp(text)
            logger.info(f"Test {i+1}: {len(doc.ents)} entit√©s d√©tect√©es")
            for ent in doc.ents:
                logger.info(f"  - {ent.text} ({ent.label_})")

        logger.info("‚úÖ √âvaluation termin√©e")
        return True

    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'√©valuation: {e}")
        return False

def create_model_info():
    """Cr√©e un fichier d'information sur le mod√®le."""
    info = {
        "model_name": "pdf_extraction_ner",
        "version": "1.0.0",
        "created_at": time.strftime("%Y-%m-%d %H:%M:%S"),
        "labels": ["nom_personne", "reference_dossier", "type_analyse", "date_prelevement", "service_demandeur"],
        "description": "Mod√®le NER pour l'extraction d'informations depuis des rapports PDF"
    }

    info_path = "training/model_output/model_info.json"
    try:
        with open(info_path, 'w', encoding='utf-8') as f:
            json.dump(info, f, indent=2, ensure_ascii=False)
        logger.info(f"‚úÖ Informations du mod√®le sauvegard√©es: {info_path}")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la sauvegarde des infos: {e}")

def main():
    """Fonction principale d'entra√Ænement."""
    logger.info("üöÄ D√©marrage du processus d'entra√Ænement complet")

    # 1. V√©rifier les d√©pendances
    if not check_dependencies():
        logger.error("‚ùå D√©pendances manquantes. Arr√™t du processus.")
        return False

    # 2. Pr√©parer les donn√©es
    if not prepare_training_data():
        logger.error("‚ùå √âchec de la pr√©paration des donn√©es. Arr√™t du processus.")
        return False

    # 3. Valider la configuration
    config_path = "training/config.cfg"
    if not validate_config(config_path):
        logger.error("‚ùå Configuration invalide. Arr√™t du processus.")
        return False

    # 4. Entra√Æner le mod√®le
    if not train_spacy_model(config_path):
        logger.error("‚ùå √âchec de l'entra√Ænement. Arr√™t du processus.")
        return False

    # 5. √âvaluer le mod√®le
    if not evaluate_model():
        logger.warning("‚ö†Ô∏è √âchec de l'√©valuation, mais le mod√®le a √©t√© cr√©√©.")

    # 6. Cr√©er les informations du mod√®le
    create_model_info()

    logger.info("üéâ Processus d'entra√Ænement termin√© avec succ√®s!")
    logger.info("üìÅ Le mod√®le se trouve dans: training/model_output/model-best")

    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
