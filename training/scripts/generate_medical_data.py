#!/usr/bin/env python3
"""
G√©n√©rateur de donn√©es synth√©tiques sp√©cialis√©es pour les rapports m√©dicaux.
Cr√©e un mod√®le sp√©cialis√© pour les documents m√©dicaux.
"""

import json
import random
from datetime import datetime, timedelta
from typing import List, Dict, Tuple

class MedicalDataGenerator:
    """G√©n√©rateur de donn√©es d'entra√Ænement pour rapports m√©dicaux."""
    
    def __init__(self):
        # Noms m√©dicaux sp√©cialis√©s
        self.noms_medicaux = [
            "MARTIN", "BERNARD", "THOMAS", "PETIT", "ROBERT", "RICHARD", "DURAND", "DUBOIS",
            "MOREAU", "LAURENT", "SIMON", "MICHEL", "LEFEBVRE", "LEROY", "ROUX", "DAVID",
            "BERTRAND", "MOREL", "FOURNIER", "GIRARD", "BONNET", "DUPONT", "LAMBERT", "FONTAINE"
        ]
        
        self.prenoms_medicaux = [
            "JEAN", "MARIE", "PIERRE", "MICHEL", "ANDRE", "PHILIPPE", "ALAIN", "BERNARD",
            "CHRISTOPHE", "PATRICK", "NICOLAS", "JACQUES", "DANIEL", "FRANCOIS", "ERIC", "LAURENT",
            "SYLVIE", "NATHALIE", "ISABELLE", "CATHERINE", "CHRISTINE", "SANDRINE", "VALERIE"
        ]
        
        # Pr√©fixes m√©dicaux sp√©cialis√©s
        self.prefixes_medicaux = {
            "nom_personne": [
                "Patient :", "Nom du patient :", "Identit√© :", "Malade :", "Personne examin√©e :",
                "Nom :", "Sujet :", "Individu :", "B√©n√©ficiaire :", "Nom et pr√©nom :"
            ],
            "reference_dossier": [
                "N¬∞ dossier m√©dical :", "Dossier patient :", "IPP :", "N¬∞ s√©jour :", "R√©f√©rence hospitali√®re :",
                "ID patient :", "Num√©ro de dossier :", "Dossier :", "N¬∞ :", "R√©f√©rence :"
            ],
            "type_analyse": [
                "Examen :", "Analyse :", "Diagnostic :", "Investigation :", "Proc√©dure :",
                "Test :", "Bilan :", "Exploration :", "Contr√¥le :", "√âvaluation :"
            ],
            "date_prelevement": [
                "Date d'examen :", "Date de consultation :", "R√©alis√© le :", "Date :", "Effectu√© le :",
                "Date de pr√©l√®vement :", "Date d'intervention :", "Examin√© le :", "Date du test :"
            ],
            "service_demandeur": [
                "Service :", "Unit√© :", "D√©partement :", "Prescripteur :", "M√©decin traitant :",
                "Service demandeur :", "Sp√©cialit√© :", "√âquipe m√©dicale :", "Praticien :"
            ]
        }
        
        # Analyses m√©dicales sp√©cialis√©es
        self.analyses_medicales = [
            "Bilan sanguin complet", "√âchographie abdominale", "Scanner thoracique",
            "IRM c√©r√©brale", "√âlectrocardiogramme", "Radiographie pulmonaire",
            "Analyse d'urine", "Bilan lipidique", "Glyc√©mie √† jeun", "Test de fonction h√©patique",
            "Analyse r√©nale", "Bilan thyro√Ødien", "Mammographie", "Coloscopie",
            "Endoscopie digestive", "Biopsie cutan√©e", "Ponction lombaire",
            "Test d'effort cardiaque", "Holter ECG 24h", "Spirom√©trie",
            "Densitom√©trie osseuse", "Scintigraphie", "Art√©riographie",
            "√âchographie cardiaque", "Doppler vasculaire", "EEG",
            "EMG", "Fibroscopie bronchique", "Cystoscopie",
            "Arthroscopie", "Coronarographie", "Angiographie"
        ]
        
        # Services m√©dicaux
        self.services_medicaux = [
            "Cardiologie", "Neurologie", "Gastro-ent√©rologie", "Pneumologie",
            "Rhumatologie", "Endocrinologie", "N√©phrologie", "H√©matologie",
            "Oncologie", "Dermatologie", "Ophtalmologie", "ORL",
            "Gyn√©cologie", "Urologie", "Orthop√©die", "Chirurgie g√©n√©rale",
            "Anesth√©sie", "Radiologie", "M√©decine interne", "G√©riatrie",
            "P√©diatrie", "Psychiatrie", "M√©decine d'urgence", "R√©animation",
            "Laboratoire de biologie", "Anatomie pathologique", "M√©decine nucl√©aire"
        ]
    
    def generate_medical_reference(self) -> str:
        """G√©n√®re une r√©f√©rence m√©dicale."""
        year = random.randint(2020, 2025)
        patterns = [
            f"IPP{random.randint(100000, 999999)}",
            f"MED-{year}-{random.randint(1000, 9999)}",
            f"PAT{random.randint(10000, 99999)}",
            f"HOSP/{year}/{random.randint(100, 999)}",
            f"CHU-{random.randint(100000, 999999)}",
            f"DOS{year}{random.randint(1000, 9999)}",
            f"REF-MED-{random.randint(100000, 999999)}",
            f"DOSS-{year}-{random.randint(1, 999):03d}"
        ]
        return random.choice(patterns)
    
    def generate_medical_date(self) -> str:
        """G√©n√®re une date m√©dicale."""
        start_date = datetime(2020, 1, 1)
        end_date = datetime(2025, 12, 31)
        random_date = start_date + timedelta(days=random.randint(0, (end_date - start_date).days))
        
        formats = ["%d/%m/%Y", "%d-%m-%Y", "%d.%m.%Y", "%d %m %Y"]
        return random_date.strftime(random.choice(formats))
    
    def generate_medical_name(self) -> str:
        """G√©n√®re un nom m√©dical."""
        nom = random.choice(self.noms_medicaux)
        prenom = random.choice(self.prenoms_medicaux)
        
        patterns = [f"{nom} {prenom}", f"{prenom} {nom}", f"{nom}, {prenom}"]
        return random.choice(patterns)
    
    def create_medical_example(self) -> Tuple[str, Dict]:
        """Cr√©e un exemple m√©dical."""
        nom = self.generate_medical_name()
        reference = self.generate_medical_reference()
        analyse = random.choice(self.analyses_medicales)
        date = self.generate_medical_date()
        service = random.choice(self.services_medicaux)
        
        # Choisir les pr√©fixes
        prefix_nom = random.choice(self.prefixes_medicaux["nom_personne"])
        prefix_ref = random.choice(self.prefixes_medicaux["reference_dossier"])
        prefix_analyse = random.choice(self.prefixes_medicaux["type_analyse"])
        prefix_date = random.choice(self.prefixes_medicaux["date_prelevement"])
        prefix_service = random.choice(self.prefixes_medicaux["service_demandeur"])
        
        # Construire le texte m√©dical
        separators = ["\n", "\n\n", " | ", "\t"]
        separator = random.choice(separators)
        
        fields = [
            (prefix_nom, nom, "nom_personne"),
            (prefix_ref, reference, "reference_dossier"),
            (prefix_analyse, analyse, "type_analyse"),
            (prefix_date, date, "date_prelevement"),
            (prefix_service, service, "service_demandeur")
        ]
        
        # Parfois m√©langer l'ordre
        if random.random() < 0.3:
            random.shuffle(fields)
        
        text_parts = []
        entities = []
        current_pos = 0
        
        # Ajouter un en-t√™te m√©dical parfois
        if random.random() < 0.4:
            headers = [
                "COMPTE RENDU M√âDICAL\n\n",
                "RAPPORT D'EXAMEN\n\n", 
                "CENTRE HOSPITALIER UNIVERSITAIRE\n\n",
                "R√âSULTATS D'ANALYSE M√âDICALE\n\n",
                "DOSSIER PATIENT\n\n",
                ""
            ]
            header = random.choice(headers)
            text_parts.append(header)
            current_pos += len(header)
        
        for i, (prefix, value, label) in enumerate(fields):
            if i > 0:
                text_parts.append(separator)
                current_pos += len(separator)
            
            text_parts.append(prefix)
            current_pos += len(prefix)
            
            if not prefix.endswith(" "):
                text_parts.append(" ")
                current_pos += 1
            
            start_pos = current_pos
            text_parts.append(value)
            end_pos = current_pos + len(value)
            current_pos = end_pos
            
            entities.append([start_pos, end_pos, label])
        
        # Ajouter une conclusion m√©dicale parfois
        if random.random() < 0.3:
            footers = [
                "\n\nRapport valid√© par le m√©decin",
                "\n\nDocument confidentiel",
                "\n\nFin du compte rendu",
                ""
            ]
            footer = random.choice(footers)
            text_parts.append(footer)
        
        text = "".join(text_parts)
        annotations = {"entities": entities}
        
        return text, annotations
    
    def generate_medical_dataset(self, num_examples: int = 300) -> List[Tuple[str, Dict]]:
        """G√©n√®re un dataset m√©dical."""
        dataset = []
        print(f"G√©n√©ration de {num_examples} exemples m√©dicaux...")
        
        for i in range(num_examples):
            try:
                example = self.create_medical_example()
                dataset.append(example)
                
                if (i + 1) % 50 == 0:
                    print(f"‚úÖ {i + 1}/{num_examples} exemples m√©dicaux g√©n√©r√©s")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur exemple {i}: {e}")
        
        print(f"üè• Dataset m√©dical g√©n√©r√©: {len(dataset)} exemples")
        return dataset
    
    def save_medical_dataset(self, dataset: List[Tuple[str, Dict]], output_path: str):
        """Sauvegarde le dataset m√©dical."""
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(dataset, f, indent=2, ensure_ascii=False)
            print(f"üíæ Dataset m√©dical sauvegard√©: {output_path}")
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde: {e}")

def main():
    """G√©n√®re le dataset m√©dical."""
    print("üè• G√©n√©ration de donn√©es m√©dicales sp√©cialis√©es")
    print("=" * 50)
    
    generator = MedicalDataGenerator()
    dataset = generator.generate_medical_dataset(num_examples=300)
    
    # Sauvegarder
    output_path = "training/data/medical_format/train_data.json"
    import os
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    generator.save_medical_dataset(dataset, output_path)
    
    print("\nüìä Exemples g√©n√©r√©s:")
    for i, (text, annotations) in enumerate(dataset[:2]):
        print(f"\nExemple m√©dical {i+1}:")
        print(f"Texte: {text[:80]}...")
        print(f"Entit√©s: {len(annotations['entities'])}")

if __name__ == "__main__":
    main()
